import json
import boto3
from decimal import Decimal
from boto3.dynamodb.conditions import Key, Attr
from datetime import datetime

dynamodb_client = boto3.client('dynamodb', region_name="eu-west-1")
ddb = boto3.resource('dynamodb')
 
RoomsStatusTable = ddb.Table('RoomsStatus')
UserConfigTable = ddb.Table('UserConfig')


now = datetime.now()

timestamp = datetime.timestamp(now)

date_time = datetime.fromtimestamp(timestamp)

time = date_time.strftime("%H:%M:%S")
date_ = date_time.strftime("%d-%m-%Y")
set_time= date_time.strftime("%d-%m-%Y,%H:%M:%S")




def lambda_handler(event, context):

    
    intro_update_topic = event["floor"] +"."+ event["room"] +".devices.waterTap"
    
    response = RoomsStatusTable.get_item(Key={'UserID' : event['uuid']})
    
    response_2 = UserConfigTable.get_item(Key={'UserID' : event['uuid']})
    

    index=-1
    i=0
    for tap in response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"]:
        if tap["number"] == event["number"]:
            index=i
        i+=1    
        
    if event["status"] == "on": 
    #add new water tap to room
        _log ={"setOffTime": "Null","setOnDate": set_time,"whoTurnOff": "Null"}
        n=[]
        n.append([event["number"],date_,time])
        
        if index == -1:

            
            k=[{"isOn": True,"lastDateSetOn": date_,"lastTimeSetOn": time,"number": event["number"],"SetOnLogs": [_log],"type":  event["type"]}]
            
            
            update_topic ="set " + intro_update_topic+".waterTapStatus  = list_append(:w,:k), "
            update_topic += intro_update_topic+".waterTapAmount =:l"
            print(update_topic)
            
            response4 = RoomsStatusTable.update_item(Key ={'UserID' :  event['uuid']},
            UpdateExpression=update_topic ,
            ExpressionAttributeValues={':k':k,":w":response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"],":l" : (response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapAmount"]+1)},
            ReturnValues="UPDATED_NEW") 
            print("insert new tapwater")
            
        else:
            myTapWater = response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]
            d = response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["lastDateSetOn"]
            t = response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["lastTimeSetOn"]
            jndex=-1
            i=0
            print(d)
            print(t)
            s =  d+","+ t
            print(s)
            for setOnLog in response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["SetOnLogs"]:
                
                if setOnLog["setOnDate"] == s:
                    jndex=i
                i=i+1
                
            if jndex!=-1:
                Error detection - if the user turned on the device shortly after we turned it off 
                date_time_obj = datetime.strptime(response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["SetOnLogs"][jndex]["setOffTime"], '%d-%m-%Y,%H:%M:%S')
                c = now-date_time_obj
                minutes = int(c.total_seconds() / 60)
          
                
                
                
                # diff = response['Item']["boiler"]["SetOnLogs"][index]["waterTemperature"] - response_2['Item']["op"]["boilerOp"]["waterOptimalTemperature"] 
                            
            
                if "us" == response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["SetOnLogs"][jndex]["whoTurnOff"]:
                    if minutes < 5:
                        avg_diff =  (Decimal(response_2['Item']["op"]["waterTapOp"]["errorCounter"] * response_2['Item']["op"]["waterTapOp"]["averageTimeError"]) + Decimal(minutes) ) /(response_2['Item']["op"]["waterTapOp"]["errorCounter"] +1)
                        topic= "set op.waterTapOp.errorCounter = :g , op.waterTapOp.averageTimeError =:t "
                        response_3 = UserConfigTable.update_item(Key ={'UserID' :  event['uuid']},
                        UpdateExpression=topic ,
                        ExpressionAttributeValues={':t':avg_diff,':g':(response_2['Item']["op"]["waterTapOp"]["errorCounter"] + 1) },
                        ReturnValues="UPDATED_NEW") 
        
            new_log = list() 
            new_log.append(_log)
            
            update_topic = "set " +intro_update_topic+".waterTapStatus["+str(index)+"].SetOnLogs  = list_append(:w,:k) ,"+intro_update_topic+".waterTapStatus["+str(index)+"].isOn =:a," +intro_update_topic+".waterTapStatus["+str(index)+"].lastTimeSetOn =:t, "+intro_update_topic+".waterTapStatus["+str(index)+"].lastDateSetOn =:d"
            response_6 = RoomsStatusTable.update_item(Key ={'UserID' :  event['uuid']},
            UpdateExpression=update_topic ,
            ExpressionAttributeValues={':k':[_log],":w":response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["SetOnLogs"],":a":True,':t':time,':d':date_},
            ReturnValues="UPDATED_NEW") 
            #"lastDateSetOn": date_,"lastTimeSetOn": time,     
            
                
    
    if event["status"] == "off" :
     #set water tap off
        if not index == -1:    
            d = response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["lastDateSetOn"]
            t = response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["lastTimeSetOn"]
            
            jndex=-1
            i=0
            s =  d+","+ t
    
            
            for setOnLog in response['Item'][event["floor"]][event["room"]]["devices"]["waterTap"]["waterTapStatus"][index]["SetOnLogs"]:
                if setOnLog["setOnDate"] == s:
                    jndex=i
                i=i+1
            if jndex != -1:
                update_topic = "set " +intro_update_topic+".waterTapStatus["+str(index)+"].SetOnLogs["+str(jndex)+"].setOffTime =:t ,"+intro_update_topic+".waterTapStatus["+str(index)+"].isOn =:a,"+intro_update_topic+".waterTapStatus["+str(index)+"].SetOnLogs["+str(jndex)+"].whoTurnOff  =:z"
                response_16 = RoomsStatusTable.update_item(Key ={'UserID' :  event['uuid']},
                UpdateExpression=update_topic ,
                ExpressionAttributeValues={':t':set_time,":a":False,":z":event["setOffBy"]},
                ReturnValues="UPDATED_NEW") 
                
            
      

        

    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
